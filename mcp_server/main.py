# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:14:40+00:00



import argparse
import json
import os
from typing import *
from typing import Optional
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import GetOrder, ListOfOrders, OrderStatus

app = MCPProxy(
    contact={
        'name': 'papiNet API CWG',
        'url': 'https://github.com/papinet/papiNet-API/issues',
    },
    description='papinet API is a global initiative for the Forst and Paper supply chain.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://github.com/papinet/papiNet-API/blob/patrice-v1.0.0/LICENSE',
    },
    title='papiNet API',
    version='1.0.0',
    servers=[
        {'description': 'papiNet Mock Server', 'url': 'https://papinet.papinet.io'}
    ],
)


@app.get(
    '/orders',
    description=""" Gets a paginated list of all `orders`. """,
    tags=['order_management'],
)
def get_orders(
    order_status: Optional[OrderStatus] = Query(None, alias='orderStatus'),
    offset: Optional[str] = None,
    limit: Optional[str] = None,
):
    """
    List `orders`
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orders/{orderId}',
    description=""" Gets the details of a specific `order`, including a paginated list of all its lines. """,
    tags=['order_management'],
)
def get_orders__order_id(order_id: UUID = Path(..., alias='orderId')):
    """
    Get an `order`
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
